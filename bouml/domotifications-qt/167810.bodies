class Communication
!!!156802.cpp!!!	Communication(inout parent : QObject = nullptr)
    qDebug() << Q_FUNC_INFO;
    /**
     * @todo Connecter le signal finished() vers le slot qui traite les réponses envoyées par la
     * station
     */
!!!156930.cpp!!!	~Communication()
    qDebug() << Q_FUNC_INFO;
!!!134570.cpp!!!	envoyerRequetePost(in api : QString, in json : QByteArray) : void
    QNetworkRequest requetePost;
    QUrl            url(URL_STATION + api);
    requetePost.setUrl(url);
    requetePost.setHeader(QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");
    requetePost.setRawHeader("Content-Type", "application/json");
    requetePost.setRawHeader("Content-Length", QByteArray::number(json.size()));
    qDebug() << Q_FUNC_INFO << "url" << url << "json" << json;
#ifndef SANS_STATION
    accesReseau->post(requetePost, json);
#endif
!!!144170.cpp!!!	recupererNotifications() : void
    /**
     * @todo Emettre la requête permettant de récupérer les états des notifications des modules. La
     * réception des données sra signalée par finished() qui devra déclencher le slot
     * traiterReponseStation() qui recevra les états des notifications.
     */
!!!144298.cpp!!!	traiterReponseStation(inout reponse : QNetworkReply) : void
    qDebug() << Q_FUNC_INFO;
    /**
     * @todo Traiter la réponses et émettre un signal etatsNotifications() pour la classe
     * Domotification (mettre à jour les états et les traiter) et l'IHM pour afficher une
     * notification ...
     */
