class Domotification
!!!157570.cpp!!!	Domotification(inout ihm : IHMDomotifications = nullptr)
    qDebug() << Q_FUNC_INFO;
    /**
     * @todo GÃ©rer un fichier de configuration INI pour les modules
     */
    // Pour les tests : 5 modules
    // 2 machines (0..6)
    modules.push_back(new Module("Machine", Module::TypeModule::Machine, 0, this));
    modules.push_back(new Module("Machine", Module::TypeModule::Machine, 1, this));
    // 2 poubelles (0..5)
    modules.push_back(new Module("Poubelle", Module::TypeModule::Poubelle, 0, this));
    modules.push_back(new Module("Poubelle", Module::TypeModule::Poubelle, 1, this));
    // 1 boite (0..1)
    modules.push_back(new Module("BoiteAuxLettres", Module::TypeModule::BoiteAuxLettres, 0, this));
    qDebug() << Q_FUNC_INFO << "modules" << modules;
!!!157698.cpp!!!	~Domotification()
    qDebug() << Q_FUNC_INFO;
!!!134698.cpp!!!	getActivationModule(in nomModule : QString, in id : int = 0) : bool
    qDebug() << Q_FUNC_INFO << "nomModule" << nomModule << "id" << id;
    for(int i = 0; i < modules.size(); ++i)
    {
        if(modules[i]->getNom() == nomModule && modules[i]->getId() == id)
            return modules[i]->estActif();
    }
    return false;
!!!157954.cpp!!!	gererNotification(in nomModule : QString) : void
    qDebug() << Q_FUNC_INFO << "nomModule" << nomModule;
!!!158082.cpp!!!	ajouterModule(in nomModule : QString, in type : Module::TypeModule) : void
    qDebug() << Q_FUNC_INFO << "nomModule" << nomModule << "TypeModule" << type;
!!!159362.cpp!!!	notifier(in message : QString) : void
    qDebug() << Q_FUNC_INFO << "message" << message;
    emit nouvelleNotification(message);
!!!134826.cpp!!!	getMachines() : QVector<Module*>
    QVector<Module*> machines;
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::Machine)
        {
            qDebug() << Q_FUNC_INFO << "module" << modules[i]->getNom() << "id"
                     << modules[i]->getId();
            machines.push_back(modules[i]);
        }
    }
    return machines;
!!!134954.cpp!!!	getPoubelles() : QVector<Module*>
    QVector<Module*> poubelles;
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::Poubelle)
        {
            qDebug() << Q_FUNC_INFO << "module" << modules[i]->getNom() << "id"
                     << modules[i]->getId();
            poubelles.push_back(modules[i]);
        }
    }
    return poubelles;
!!!135082.cpp!!!	getBoite() : Module
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::BoiteAuxLettres)
        {
            return modules[i];
        }
    }
    return nullptr;
!!!157826.cpp!!!	gererActivationModule(in nomModule : QString, in id : int) : void
    qDebug() << Q_FUNC_INFO << "nomModule" << nomModule << "id" << id;
    for(auto i = 0; i < modules.size(); ++i)
    {
        if(modules[i]->getNom() == nomModule && modules[i]->getId() == id)
        {
            modules[i]->setActif(!modules[i]->estActif());
            // Exemple
            QByteArray json = "{";
            json += "\"id\":" + QString::number(modules[i]->getId()) + QString(",");
            if(modules[i]->estActif())
                json += "\"etat\":true";
            else
                json += "\"etat\":false";
            json += "}";
            communication->envoyerRequetePost(Module::getType(modules[i]->getType()), json);
        }
    }
