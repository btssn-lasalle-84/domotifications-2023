class Domotification
!!!157570.cpp!!!	Domotification(inout ihm : IHMDomotifications = nullptr)
    qDebug() << Q_FUNC_INFO;
    chargerModules();
!!!157698.cpp!!!	~Domotification()
    qDebug() << Q_FUNC_INFO;
!!!178946.cpp!!!	recupererIndexModule(in typeModule : QString, in id : int = 0) : int
    for(int i = 0; i < modules.size(); ++i)
    {
        if(modules[i]->recupererType() == typeModule && modules[i]->getId() == id)
        {
            return i;
        }
    }
    return NON_TROUVE;
!!!134698.cpp!!!	getActivationModule(in typeModule : QString, in id : int = 0) : bool
    for(int i = 0; i < modules.size(); ++i)
    {
        if(modules[i]->getNom() == typeModule && modules[i]->getId() == id)
        {
            qDebug() << Q_FUNC_INFO << "typeModule" << typeModule << "id" << id << "estActif"
                     << modules[i]->estActif();
            return modules[i]->estActif();
        }
    }
    return false;
!!!158082.cpp!!!	ajouterModule(in nomModule : QString, in type : Module::TypeModule) : void
    qDebug() << Q_FUNC_INFO << "nomModule" << nomModule << "TypeModule" << type;
!!!159362.cpp!!!	notifier(in message : QString) : void
    qDebug() << Q_FUNC_INFO << "message" << message;
    emit nouvelleNotification(message);
!!!134954.cpp!!!	getPoubelles() : QVector<Module*>
    QVector<Module*> poubelles;
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::Poubelle)
        {
            qDebug() << Q_FUNC_INFO << "module" << modules[i]->getNom() << "id"
                     << modules[i]->getId();
            poubelles.push_back(modules[i]);
        }
    }
    return poubelles;
!!!134826.cpp!!!	getMachines() : QVector<Module*>
    QVector<Module*> machines;
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::Machine)
        {
            qDebug() << Q_FUNC_INFO << "module" << modules[i]->getNom() << "id"
                     << modules[i]->getId();
            machines.push_back(modules[i]);
        }
    }
    return machines;
!!!135082.cpp!!!	getBoite() : Module
    for(auto i = 0; i < modules.size(); i++)
    {
        if(modules[i]->getType() == Module::BoiteAuxLettres)
        {
            return modules[i];
        }
    }
    return nullptr;
!!!179074.cpp!!!	chargerModules() : void
    /**
     * @todo GÃ©rer un fichier de configuration INI pour les modules
     */
    // Pour les tests : 5 modules
    // 2 machines (0..6)
    modules.push_back(new Module("machine", Module::TypeModule::Machine, 0, this));
    modules.push_back(new Module("machine", Module::TypeModule::Machine, 1, this));
    // 2 poubelles (0..5)
    modules.push_back(new Module("poubelle", Module::TypeModule::Poubelle, 0, this));
    modules.push_back(new Module("poubelle", Module::TypeModule::Poubelle, 1, this));
    modules.push_back(new Module("poubelle", Module::TypeModule::Poubelle, 2, this));
    // 1 boite (0..1)
    modules.push_back(new Module("boite", Module::TypeModule::BoiteAuxLettres, 0, this));
    qDebug() << Q_FUNC_INFO << "modules" << modules;
!!!157954.cpp!!!	gererNotification(in typeModule : QString, in id : int) : void
    qDebug() << Q_FUNC_INFO << "typeModule" << typeModule << "id" << id;
!!!157826.cpp!!!	gererActivationModule(in typeModule : QString, in id : int) : void
    int indexModule = recupererIndexModule(typeModule, id);
    qDebug() << Q_FUNC_INFO << "typeModule" << typeModule << "id" << id << "indexModule"
             << indexModule;
    if(indexModule == NON_TROUVE)
        return;

    QByteArray json = "{";
    json += "\"module\":\"" + QString(typeModule) + QString("\"") + QString(",") +
            "\"id\":" + QString::number(id) + QString(",");
    qDebug() << Q_FUNC_INFO << "json" << json;
    if(modules[indexModule]->estActif())
    {
        json += "\"etat\":0";
    }
    else
    {
        json += "\"etat\":1";
    }
    json += "}";

    communication->envoyerRequetePost(typeModule, json);

    modules[indexModule]->setActif(!modules[indexModule]->estActif());
