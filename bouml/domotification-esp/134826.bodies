class StationLumineuse
!!!135850.cpp!!!	StationLumineuse()
    // initialiserCouleursPoubelles();
!!!160170.cpp!!!	recupererEtatsNotifications() : void
    char cle[64] = "";
    etatBoiteAuxLettres = preferences.getBool("boite", false);
    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; ++i)
    {
        sprintf((char*)cle, "%s%d", "machine", i);
        etatMachines[i] = preferences.getBool(cle, false);
    }

    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; ++i)
    {
        sprintf((char*)cle, "%s%d", "poubelle", i);
        etatPoubelles[i] = preferences.getBool(cle, false);
    }
!!!160298.cpp!!!	recupererEtatsActivations() : void
    char cle[64] = "";
    activationBoiteAuxLettres = preferences.getBool("activationBoite", true);
    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; ++i)
    {
        sprintf((char*)cle, "%s%d", "activationMachine", i);
        activationMachines[i] = preferences.getBool(cle, true);
    }

    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; ++i)
    {
        sprintf((char*)cle, "%s%d", "activationPoubelle", i);
        activationPoubelles[i] = preferences.getBool(cle, true);
    }
!!!135978.cpp!!!	initialiserPreferences() : void
    preferences.begin("eeprom", false); // false pour r/w
    recupererEtatsNotifications();
    recupererEtatsActivations();
!!!136106.cpp!!!	initialiserNotifications() : void
    leds.begin();
    leds.clear();

    if(activationBoiteAuxLettres)
    {
        if(etatBoiteAuxLettres)
        {
            allumerNotificationBoiteAuxLettres();
        }
        else
        {
            eteindreNotificationBoiteAuxLettres();
        }
    }

    for(int i = 0; i < NB_LEDS_NOTIFICATION_MACHINES; i++)
    {
        if(activationMachines[i])
        {
            if(etatMachines[i])
            {
                allumerNotificationMachine(i);
            }
            else
            {
                eteindreNotificationMachine(i);
            }
        }
    }

    for(int i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; i++)
    {
        if(activationPoubelles[i])
        {
            if(etatPoubelles[i])
            {
                allumerNotificationPoubelle(i);
            }
            else
            {
                eteindreNotificationPoubelle(i);
            }
        }
    }
!!!146602.cpp!!!	initialiserCouleursPoubelles() : void
    const uint8_t couleursRGB[NB_LEDS_NOTIFICATION_POUBELLES][NB_COULEURS] = {
        { 0, 0, 255 },    // Couleur poubelle 0 (bleue)
        { 0, 255, 0 },    // Couleur poubelle 1 (verte)
        { 255, 255, 0 },  // Couleur poubelle 2 (jaune)
        { 255, 0, 0 },    // Couleur poubelle 3 (rouge)
        { 128, 128, 128 } // Couleur poubelle 4 (grise)
    };

    for(uint8_t i = 0; i < NB_LEDS_NOTIFICATION_POUBELLES; i++)
    {
        couleursPoubelles[i] =
          leds.Color(couleursRGB[i][ROUGE], couleursRGB[i][VERT], couleursRGB[i][BLEU]);
    }
!!!160426.cpp!!!	setActivationBoiteAuxLettres(in etat : bool) : void
    activationBoiteAuxLettres = etat;
    preferences.putBool("activationBoite", etat);
!!!160554.cpp!!!	getActivationBoiteAuxLettres() : bool
    return activationBoiteAuxLettres;
!!!160682.cpp!!!	setActivationMachine(in id : int, in etat : bool) : void
    if(estIdValideMachine(id))
    {
        activationMachines[id] = etat;
        char cle[64] = "";
        sprintf((char*)cle, "%s%d", "activationMachine", id);
        preferences.putBool(cle, etat);
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de machine invalide"));
    }
!!!160810.cpp!!!	getActivationMachine(in id : int) : bool
    if(estIdValideMachine(id))
    {
        return activationMachines[id];
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de machine invalide"));
        return false;
    }
!!!160938.cpp!!!	setActivationPoubelle(in id : int, in etat : bool) : void
    if(estIdValidePoubelle(id))
    {
        activationPoubelles[id] = etat;
        char cle[64] = "";
        sprintf((char*)cle, "%s%d", "activationPoubelle", id);
        preferences.putBool(cle, etat);
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de poubelle invalide"));
    }
!!!161066.cpp!!!	getActivationPoubelle(in id : int) : bool
    if(estIdValidePoubelle(id))
    {
        return activationPoubelles[id];
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de poubelle invalide"));
        return false;
    }
!!!136234.cpp!!!	getEtatBoiteAuxLettres() : bool
    return etatBoiteAuxLettres;
!!!136362.cpp!!!	setEtatBoiteAuxLettres(in etat : bool) : void
    if(activationBoiteAuxLettres)
    {
        etatBoiteAuxLettres = etat;
        preferences.putBool("boite", etatBoiteAuxLettres);
        if(etat)
        {
            allumerNotificationBoiteAuxLettres();
        }
        else
        {
            eteindreNotificationBoiteAuxLettres();
        }
    }
!!!136490.cpp!!!	resetEtatBoiteAuxLettres() : void
    etatBoiteAuxLettres = false;
    preferences.putBool("boite", etatBoiteAuxLettres);
    eteindreNotificationBoiteAuxLettres();
!!!136618.cpp!!!	allumerNotificationBoiteAuxLettres() : void
    for(int i = INDEX_LEDS_NOTIFICATION_BOITE;
        i < (INDEX_LEDS_NOTIFICATION_BOITE + NB_LEDS_NOTIFICATION_BOITE);
        ++i)
    {
        leds.setPixelColor(i, leds.Color(255, 0, 0));
        leds.show();
    }
!!!136746.cpp!!!	eteindreNotificationBoiteAuxLettres() : void
    for(int i = INDEX_LEDS_NOTIFICATION_BOITE;
        i < (INDEX_LEDS_NOTIFICATION_BOITE + NB_LEDS_NOTIFICATION_BOITE);
        ++i)
    {
        leds.setPixelColor(i, leds.Color(0, 0, 0));
        leds.show();
    }
!!!136874.cpp!!!	estIdValideMachine(in numeroMachine : int) : bool
    return (numeroMachine >= 0 && numeroMachine < NB_LEDS_NOTIFICATION_MACHINES);
!!!137002.cpp!!!	getEtatMachine(in numeroMachine : int) : bool
    if(estIdValideMachine(numeroMachine))
    {
        return etatMachines[numeroMachine];
    }
    else
    {
        return false;
    }
!!!137130.cpp!!!	setEtatMachine(in numeroMachine : int, in etat : bool) : void
    if(activationMachines[numeroMachine])
    {
        if(!estIdValideMachine(numeroMachine))
            return;
        etatMachines[numeroMachine] = etat;
        char cle[64]                = "";
        sprintf((char*)cle, "%s%d", "machine", numeroMachine);
        preferences.putBool(cle, etatMachines[numeroMachine]);
        if(etat)
        {
            allumerNotificationMachine(numeroMachine);
        }
        else
        {
            eteindreNotificationMachine(numeroMachine);
        }
    }
!!!137258.cpp!!!	resetEtatMachines(in numeroMachine : int) : void
    if(estIdValideMachine(numeroMachine))
    {
        etatMachines[numeroMachine] = false;
        char cle[64]                = "";
        sprintf((char*)cle, "%s%d", "machine", numeroMachine);
        preferences.putBool(cle, etatMachines[numeroMachine]);
        eteindreNotificationMachine(numeroMachine);
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de machine invalide"));
    }
!!!137386.cpp!!!	allumerNotificationMachine(in numeroMachine : int) : void
    if(estIdValideMachine(numeroMachine))
    {
        leds.setPixelColor(INDEX_LEDS_NOTIFICATION_MACHINES + numeroMachine,
                           leds.Color(0, 255, 0)); // Appliquer la couleur correspondante
        leds.show();                               // Allume le bandeau
    }
!!!137514.cpp!!!	allumerNotificationMachines() : void
    for(int i = INDEX_LEDS_NOTIFICATION_MACHINES;
        i < (INDEX_LEDS_NOTIFICATION_MACHINES + NB_LEDS_NOTIFICATION_MACHINES);
        ++i)
    {
        /**
         * Définir des constantes pour les couleurs
         */
        leds.setPixelColor(i, leds.Color(0, 255, 0));
        leds.show();
    }
!!!137642.cpp!!!	eteindreNotificationMachine(in numeroMachine : int) : void
    if(estIdValideMachine(numeroMachine))
    {
        int indexLed = INDEX_LEDS_NOTIFICATION_MACHINES + numeroMachine;
        leds.setPixelColor(indexLed, leds.Color(0, 0, 0));
        leds.show();
    }
!!!137770.cpp!!!	eteindreNotificationMachines() : void
    for(int i = INDEX_LEDS_NOTIFICATION_MACHINES;
        i < (INDEX_LEDS_NOTIFICATION_MACHINES + NB_LEDS_NOTIFICATION_MACHINES);
        ++i)
    {
        /**
         * @todo Définir des constantes pour les couleurs
         */
        leds.setPixelColor(i, leds.Color(0, 0, 0));
        leds.show();
    }
!!!137898.cpp!!!	estIdValidePoubelle(in numeroPoubelle : int) : bool
    return (numeroPoubelle >= 0 && numeroPoubelle < NB_LEDS_NOTIFICATION_POUBELLES);
!!!138026.cpp!!!	getEtatPoubelle(in numeroPoubelle : int) : bool
    if(estIdValidePoubelle(numeroPoubelle))
    {
        return etatPoubelles[numeroPoubelle];
    }
    else
    {
        return false;
    }
!!!139562.cpp!!!	setEtatPoubelle(in numeroPoubelle : int, in etat : bool) : void
    if(activationPoubelles[numeroPoubelle])
    {
        if(!estIdValidePoubelle(numeroPoubelle))
            return;
        etatPoubelles[numeroPoubelle] = etat;
        char cle[64]                  = "";
        sprintf((char*)cle, "%s%d", "poubelle", numeroPoubelle);
        preferences.putBool(cle, etatPoubelles[numeroPoubelle]);
        if(etat)
        {
            allumerNotificationPoubelle(numeroPoubelle);
        }
        else
        {
            eteindreNotificationPoubelle(numeroPoubelle);
        }
    }
!!!138410.cpp!!!	resetEtatPoubelles(in numeroPoubelle : int) : void
    if(estIdValidePoubelle(numeroPoubelle))
    {
        etatPoubelles[numeroPoubelle] = false;
        char cle[64]                  = "";
        sprintf((char*)cle, "%s%d", "poubelle", numeroPoubelle);
        preferences.putBool(cle, etatPoubelles[numeroPoubelle]);
        eteindreNotificationPoubelle(numeroPoubelle);
    }
    else
    {
        Serial.println(F("Erreur: Identifiant de poubelle invalide"));
    }
!!!138538.cpp!!!	allumerNotificationPoubelle(in numeroPoubelle : int) : void
    if(estIdValidePoubelle(numeroPoubelle))
    {
        leds.setPixelColor(
          INDEX_LEDS_NOTIFICATION_POUBELLES + numeroPoubelle,
          couleursPoubelles[numeroPoubelle]); // Appliquer la couleur correspondante
        leds.show();                          // Allume le bandeau
    }
!!!138794.cpp!!!	eteindreNotificationPoubelle(in numeroPoubelle : int) : void
    if(estIdValidePoubelle(numeroPoubelle))
    {
        int indexLed = INDEX_LEDS_NOTIFICATION_POUBELLES + numeroPoubelle;
        leds.setPixelColor(indexLed, leds.Color(0, 0, 0));
        leds.show();
    }
